/*----------------------------------------------------------------------------*/
/* Copyright (c) FIRST 2008. All Rights Reserved.                             */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package edu.wpi.first.wpilibj.templates;

import edu.wpi.first.wpilibj.SimpleRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Jaguar;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.camera.AxisCamera;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.DriverStationLCD;
import edu.wpi.first.wpilibj.Gyro;

//import edu.wpi.first.wpilibj.buttons.JoystickButton; Not needed (using raw input)


/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the SimpleRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class RobotTemplate extends SimpleRobot {
    /**
     * This function is called once each time the robot enters autonomous mode.
     */
	
		 Joystick driveStick = new Joystick(0);
		 Joystick liftStick = new Joystick(1);
		 
		 Servo cam1X = new Servo(7);
		 Servo cam1Y = new Servo(8);
		 
		 public static Gyro roboGyro = new Gyro(9, 9);
		 double robotDegrees = roboGyro.getAngle();
		
		 DriverStationLCD lcd = DriverStationLCD.getInstance(); //finds and accesses the lcd `on the driver station naming it lcd.
		 
		 SmartDashboard dash = new SmartDashboard();
		 SendableChooser autoChooser = new SendableChooser();
		 
		 AxisCamera cam1 = AxisCamera.getInstance("10.16.72.2");
		 
		 public static AxisCamera.ResolutionT k640x360;
		 
		// autoChooser.addDefault("default", 1);
		 
		 /*trigger is ground level each stage is a different set height for the containers to stack. Still needs calculations
		 JoystickButton button2 = new JoystickButton(liftStick, 2);
		 JoystickButton button3 = new JoystickButton(liftStick, 3);
		 JoystickButton button4 = new JoystickButton(liftStick, 2);
		 JoystickButton button5 = new JoystickButton(liftStick, 5); Not needed (using raw input) */
	
		 RobotDrive chassis = new RobotDrive(0, 1, 2, 3);
		 
		 Talon frontLeft = new Talon(0);
		 Talon frontRight = new Talon(1);
		 Talon rearLeft = new Talon(2);
		 Talon rearRight = new Talon(3);
		 
		 LiftOperator lifter = new LiftOperator();
		 
		 RobotDrive liftDriver = new RobotDrive(5,11);
		 
		 Jaguar lift = new Jaguar(5);
		 Jaguar test = new Jaguar(11);
		 
		 public final double GROUND_SENSOR_DISTANCE = 0.1; //ground level
		 public final double FIRST_SENSOR_DISTANCE = 12.1; //1st level
		 public final double SECOND_SENSOR_DISTANCE = 24.2; //2nd level
		 public final double THIRD_SENSOR_DISTANCE = 36.3; //3rd level
		 public final double FOURTH_SENSOR_DISTANCE = 48.4; //4th level
		 public final double FIFTH_SENSOR_DISTANCE = 56; //5th level (container)
		 
		 Ultrasonic liftSensor = new Ultrasonic(6, 6);
		 public static double liftHeight; //in inches | totes = 12.1 in, containers = 29 in
		 public static double desiredHeight;
		 
		 boolean isLiftReady = false;
		 boolean stopLoop = false;
	
    public void autonomous() {
				lcd.println(DriverStationLCD.Line.kUser6, 1, "Robot now in Autonomous mode!");
	      lcd.updateLCD();
				//first number is x drive speed, 2nd is y drive speed, 3rd is rotation speed, 4th is the angle of rotation
				chassis.mecanumDrive_Cartesian(liftHeight, liftHeight, liftHeight, liftHeight);
        chassis.setSafetyEnabled(false);
        chassis.mecanumDrive_Polar(0.5, 0.0, 0.0);
        Timer.delay(2.0);
        chassis.mecanumDrive_Polar(0.0, 0.0, 0.0);
    }

    /**
     * This function is called once each time the robot enters operator control.
     */
    public void operatorControl() {
			liftSensor.setAutomaticMode(true);
			liftSensor.setEnabled(true);
			
			lcd.println(DriverStationLCD.Line.kUser6, 1, "Robot now in TeleOp mode!");
	    lcd.updateLCD();
			
			Thread driveThread = new Thread() {
				public void start() {
				}
				public void run() {
					chassis.mecanumDrive_Polar(driveStick.getMagnitude(), driveStick.getDirectionDegrees(), driveStick.getTwist());
				}
			};
			Thread liftThread = new Thread() {
				private Joystick liftStick;
				public void start(){
					liftStick = new Joystick(1);
				}
				public void run() {
					if(liftStick.getTrigger()){
						lifter.toGround();
						while(liftHeight >= (desiredHeight + 2) || liftHeight <= (desiredHeight - 2) && stopLoop == false) {
								lifter.toGround();
								lifter.getLiftInput();
							}
						stopLoop = false;
						}
					if(liftStick.getRawButton(2)) {
						lifter.toFirst();
						while(liftHeight >= (desiredHeight + 2) || liftHeight <= (desiredHeight - 2) && stopLoop == false) {
								lifter.toFirst();
								lifter.getLiftInput();
							}
						stopLoop = false;
						}
						if(liftStick.getRawButton(3)) {
						lifter.toSecond();
						while(liftHeight >= (desiredHeight + 2) || liftHeight <= (desiredHeight - 2) && stopLoop == false) {
								lifter.toSecond();
								lifter.getLiftInput();
							}
						stopLoop = false;
						}
						if(liftStick.getRawButton(4)) {
						lifter.toThird();
						while(liftHeight >= (desiredHeight + 2) || liftHeight <= (desiredHeight - 2) && stopLoop == false) {
								lifter.toThird();
								lifter.getLiftInput();
							}
						stopLoop = false;
						}
						if(liftStick.getRawButton(5)) {
						lifter.toFourth();
						while(liftHeight >= (desiredHeight + 2) || liftHeight <= (desiredHeight - 2) && stopLoop == false) {
								lifter.toFourth();
								lifter.getLiftInput();
							}
						stopLoop = false;
						}
						if(liftStick.getRawButton(10)) {
						lifter.toFifth();
						while(liftHeight >= (desiredHeight + 2) || liftHeight <= (desiredHeight - 2) && stopLoop == false) {
								lifter.toFifth();
								lifter.getLiftInput();
							}
						stopLoop = false;
						}
					}
				};
			
			Thread liftAxisThread = new Thread() {
				public void start() {
					}
					public void run() {
						liftDriver.arcadeDrive(liftStick.getY(), liftStick.getX());
				}
			};
		
        while (isOperatorControl() && isEnabled()) {
							chassis.setSafetyEnabled(true);
							driveThread.start();
							liftThread.start();
							liftAxisThread.start();
					}
				}
						
						
  /**
     * This function is called once each time the robot enters test mode.
    */
    public void test() {
			
			lcd.println(DriverStationLCD.Line.kUser6, 1, "Robot now in Test mode!");
	    lcd.updateLCD();
			
				liftSensor.setAutomaticMode(true);
				liftSensor.setEnabled(true);
				double testHeight;
				while (isTest() && isEnabled()) {
					testHeight = liftSensor.getRangeInches();
					System.out.println(testHeight + " inches");
					lcd.println(DriverStationLCD.Line.kUser6, 1, testHeight + " inches");
				  lcd.updateLCD();
		}
	}
}
